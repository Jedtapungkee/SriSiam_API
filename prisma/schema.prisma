// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String?
  lastName   String?
  email      String   @unique
  password   String?
  provider   String? // เช่น "google" หรือ "credentials"
  providerId String? // เช่น Google User ID
  picture    String?
  role       String   @default("user")
  enabled    Boolean  @default(true)
  address    String?
  orders     Order[]
  carts      Cart[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EducationLevel {
  id        Int       @id @default(autoincrement())
  name      String // เช่น "ประถม", "มัธยมต้น", "มัธยมปลาย"
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id               Int              @id @default(autoincrement())
  title            String
  description      String?
  price            Float
  sold             Int              @default(0)
  orderItems       ProductOnOrder[]
  cartItems        ProductOnCart[]
  images           Image[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  category         Category?        @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  educationLevel   EducationLevel?  @relation(fields: [educationLevelId], references: [id])
  educationLevelId Int?
  gender           EnumGender?
  productsizes     ProductSize[]
}

model ProductSize {
  id        Int      @id @default(autoincrement())
  productId Int
  size      EnumSize
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // ป้องกันไม่ให้มี size ซ้ำในสินค้าเดียวกัน
  @@unique([productId, size])
}

enum EnumGender {
  MALE
  FEMALE
  UNISEX
}

enum EnumSize {
  S
  M
  L
  XL
  XXL
  // สำหรับรองเท้าอาจจะเพิ่ม
  SIZE_36
  SIZE_37
  SIZE_38
  SIZE_39
  SIZE_40
  SIZE_41
  SIZE_42
  SIZE_43
  SIZE_44
  SIZE_45
}

model Order {
  id          Int              @id @default(autoincrement())
  products    ProductOnOrder[]
  cartTotal   Float
  orderStatus String           @default("Not Process")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  orderedBy   User             @relation(fields: [orderedById], references: [id])
  orderedById Int
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id          Int             @id @default(autoincrement())
  products    ProductOnCart[]
  cartTotal   Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderedBy   User            @relation(fields: [orderedById], references: [id])
  orderedById Int
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  count     Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}
